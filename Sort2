## 2. Merge Sort
## This sort algorithm works by dividing the given list into equal halves
## until each item stands alone
## worst case run time of O(n)
## Ex: values = [7, 5, 2, 4, 3, 6, 8, 1]
## leftside = [7, 5, 2, 4] and rightside = [3, 6, 8, 1]

def mergesort(values):
  if len(values) <= 1:
    return values
  left, right = split(values)
  leftside = mergesort(left)
  rightside = mergesort(right)
  return merge(leftside,rightside)

def split(values):
  mid = len(values)//2
  lower = values[:mid]
  upper = values[mid:]
  return lower, upper

def merge(leftside,rightside):
  Newvalues = []
  i,j = 0,0 ## dummy variables
  while i < len(leftside) and j < len(rightside):
    if leftside[i] < rightside[j]:
      Newvalues.append(leftside[i])
      i += 1
    else:
      Newvalues.append(rightside[j])
      j += 1
  while i < len(leftside):
    Newvalues.append(leftside[i])
    i += 1
  while j < len(rightside):
    Newvalues.append(rightside[j])
    j += 1
  return Newvalues

values = [7, 5, 2, 4, 3, 6, 8, 1,4,3,8]
MS = mergesort(values)
print(MS)
